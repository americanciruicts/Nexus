version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: nexus_postgres_prod
    environment:
      POSTGRES_DB: nexus
      POSTGRES_USER: nexus_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_in_production}
    ports:
      - "5001:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../db/init-db:/docker-entrypoint-initdb.d
    networks:
      - nexus_network
    restart: unless-stopped

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: nexus_backend_prod
    environment:
      DATABASE_URL: postgresql://nexus_user:${POSTGRES_PASSWORD:-change_in_production}@postgres:5432/nexus
      SECRET_KEY: ${SECRET_KEY:-change_in_production}
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    ports:
      - "5002:8000"
    depends_on:
      - postgres
    networks:
      - nexus_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: production
    container_name: nexus_frontend_prod
    ports:
      - "5003:3000"
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:5002}
      NODE_ENV: production
    networks:
      - nexus_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: nexus_nginx_prod
    ports:
      - "5000:80"
      - "5443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - nexus_network
    restart: unless-stopped

networks:
  nexus_network:
    driver: bridge

volumes:
  postgres_data: